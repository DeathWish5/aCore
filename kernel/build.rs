use std::io::Write;

fn main() {
    for i in std::env::vars() {
        println!("{:?}", i);
    }
    let mut arch = std::env::var("ARCH").unwrap();
    if arch == "riscv32" || arch == "riscv64" {
        arch = "riscv".into();
    }
    let header = format!("src/arch/{}/syscall_ids.h.in", arch);

    println!("cargo:rerun-if-changed={}", header);

    let mut fout = std::fs::File::create("src/syscall/consts.rs").unwrap();
    writeln!(fout, "// Generated by build.rs. DO NOT EDIT.").unwrap();
    writeln!(fout, "use numeric_enum_macro::numeric_enum;\n").unwrap();
    writeln!(fout, "numeric_enum! {{").unwrap();
    writeln!(fout, "#[repr(u32)]").unwrap();
    writeln!(fout, "#[derive(Debug, Eq, PartialEq)]").unwrap();
    writeln!(fout, "#[allow(non_camel_case_types)]").unwrap();
    writeln!(fout, "pub enum SyscallType {{").unwrap();

    let data = std::fs::read_to_string(header).unwrap();
    for line in data.lines() {
        if !line.starts_with("#define") {
            continue;
        }
        let s1 = line.find(' ').unwrap();
        let s2 = s1 + 1 + line[s1 + 1..].find(' ').unwrap();
        let name = &line[s1 + 1..s2];
        let id = &line[s2 + 1..];

        let name = &name[5..].to_uppercase();
        writeln!(fout, "    {} = {},", name, id).unwrap();
    }
    writeln!(fout, "}}").unwrap();
    writeln!(fout, "}}").unwrap();
}
