use std::fs;
use std::io::Write;

fn gen_syscall_ids(arch: String) {
    let header = format!("src/arch/{}/syscall_ids.h.in", arch);
    let output = format!("src/arch/{}/syscall_ids.rs", arch);

    println!("cargo:rerun-if-changed={}", header);

    let mut fout = fs::File::create(output).unwrap();
    writeln!(fout, "// Generated by build.rs. DO NOT EDIT.").unwrap();
    writeln!(fout, "use numeric_enum_macro::numeric_enum;\n").unwrap();
    writeln!(fout, "numeric_enum! {{").unwrap();
    writeln!(fout, "#[repr(u32)]").unwrap();
    writeln!(fout, "#[derive(Debug, Eq, PartialEq)]").unwrap();
    writeln!(fout, "#[allow(non_camel_case_types)]").unwrap();
    writeln!(fout, "pub enum SyscallType {{").unwrap();

    let data = fs::read_to_string(header).unwrap();
    for line in data.lines() {
        if !line.starts_with("#define") {
            continue;
        }
        let s1 = line.find(' ').unwrap();
        let s2 = s1 + 1 + line[s1 + 1..].find(' ').unwrap();
        let name = &line[s1 + 1..s2];
        let id = &line[s2 + 1..];

        let name = &name[5..].to_uppercase();
        writeln!(fout, "    {} = {},", name, id).unwrap();
    }
    writeln!(fout, "}}").unwrap();
    writeln!(fout, "}}").unwrap();
}

fn gen_config() {
    let cpu_num = std::env::var("SMP")
        .ok()
        .and_then(|s| s.parse().ok())
        .unwrap_or(2);
    let configs = vec![
        ("CPU_NUM", cpu_num),
        ("BOOTSTRAP_CPU_ID", 0),
        ("NORMAL_CPU_ID", 0),
        ("IO_CPU_ID", 1),
    ];

    let mut fout = fs::File::create("src/config.rs").unwrap();
    writeln!(fout, "// Generated by build.rs. DO NOT EDIT.").unwrap();
    for c in configs {
        writeln!(fout, "pub const {}: usize = {};", c.0, c.1).unwrap();
    }
}

fn main() {
    println!("cargo:rerun-if-env-changed=SMP");

    let mut arch = std::env::var("ARCH").unwrap();
    if arch == "riscv32" || arch == "riscv64" {
        arch = "riscv".into();
    }

    gen_syscall_ids(arch);
    gen_config();
}
